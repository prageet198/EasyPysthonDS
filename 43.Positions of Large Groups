TITLE:-Positions of Large Groups
URL:-https://leetcode.com/problems/positions-of-large-groups/description/

Question:-

In a string s of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like s = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z", and "yy".

A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, "xxxx" 
has the interval [3,6].

A group is considered large if it has 3 or more characters.

Return the intervals of every large group sorted in increasing order by start index.

 

Example 1:

Input: s = "abbxxxxzzy"
Output: [[3,6]]
Explanation: "xxxx" is the only large group with start index 3 and end index 6.
Example 2:

Input: s = "abc"
Output: []
Explanation: We have groups "a", "b", and "c", none of which are large groups.
Example 3:

Input: s = "abcdddeeeeaabbbcd"
Output: [[3,5],[6,9],[12,14]]
Explanation: The large groups are "ddd", "eeee", and "bbb".

Solution:-

class Solution(object):
    def largeGroupPositions(self, s):
        result = []  # To store the large group intervals
        n = len(s)   # Length of the string
        
        i = 0  # Start from the first character
        while i < n:
            start = i  # Mark the start of the group
            
            # Move i to the end of the current group of the same character
            while i < n - 1 and s[i] == s[i + 1]:
                i += 1
            
            end = i  # Mark the end of the group
            
            # Check if the group size is 3 or more
            if end - start + 1 >= 3:
                result.append([start, end])  # Add the interval to results
            
            i += 1  # Move to the next character
        
        return result  # Return all large group intervals

# Example usage:
solution = Solution()
print(solution.largeGroupPositions("abbxxxxzzy"))  # Output: [[3, 6]]
print(solution.largeGroupPositions("abc"))          # Output: []
print(solution.largeGroupPositions("abcdddeeeeaabbbcd"))  # Output: [[3, 5], [6, 9], [12, 14]]
