TITLE:-Binary Tree Paths
URL:-https://leetcode.com/problems/binary-tree-paths/description/

Question:-
Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

Example 1:

Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]

Solution:-
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution(object):
    def binaryTreePaths(self, root):
        def dfs(node, path):
            if node:
                path.append(str(node.val))  # Append current node's value to the path
                if not node.left and not node.right:  # Check if it's a leaf node
                    paths.append("->".join(path))  # Join the path and add it to paths
                else:
                    dfs(node.left, path)  # Recurse left
                    dfs(node.right, path)  # Recurse right
                path.pop()  # Backtrack

        paths = []
        dfs(root, [])
        return paths

# Example usage:
# Constructing the tree for the first example: root = [1,2,3,null,5]
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.right = TreeNode(5)

# Create an instance of Solution and get the paths
solution = Solution()
result = solution.binaryTreePaths(root)
print(result)  # Output: ["1->2->5", "1->3"]
